<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	
	<parent>
		<groupId>com.hua</groupId>
		<artifactId>build-entire</artifactId>
		<version>0.0.1</version>
	</parent>	
	<artifactId>maven-build</artifactId>
	<packaging>jar</packaging>
	<name>maven-build</name>
	
	<properties>
		<!-- 传参方式: 
		mvn <阶段...> -Dname=value
		mvn <阶段...> -Denv=xx  -->
		<env>dev</env>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.version>0.0.1</maven.version>
		<maven.plugin.compiler.version>3.8.0</maven.plugin.compiler.version>
		<maven.plugin.source.version>3.0.1</maven.plugin.source.version>
		<maven.plugin.surefire.version>2.22.1</maven.plugin.surefire.version>
		<maven.plugin.assembly.version>3.1.0</maven.plugin.assembly.version>
		<maven.plugin.resources.version>3.1.0</maven.plugin.resources.version>
		<maven.plugin.dependency.version>3.1.1</maven.plugin.dependency.version>
		<maven.plugin.war.version>3.2.2</maven.plugin.war.version>
		<github.plugin.site.version>0.12</github.plugin.site.version>
	</properties>

	<!-- 项目构建 -->
	<build>
		<filters>
			<filter>src/main/resources/filter/filter-${env}.properties</filter>
		</filters>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<!-- 排除过滤器文件 -->
				<excludes>
					<exclude>*/*-${env}.properties</exclude>
				</excludes>
			</resource>
		</resources>
		
		<!-- 编译插件 -->
		<plugins>
			<!-- 编译插件 -->
			<plugin>
<!-- 				<groupId>org.apache.maven.plugins</groupId> -->
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven.plugin.compiler.version}</version>
				<configuration>
					<compilerVersion>${jdk.version}</compilerVersion>
					<!-- 编译的类文件是否包含调试信息 -->
					<debug>true</debug>
					<!-- 是否展示详细的设置信息 -->
					<detail>true</detail>
					<!-- 指定编译文件的编码 -->
					<encoding>${project.build.sourceEncoding}</encoding>
					<!-- 指定main排除的文件 (暂时无法实现) -->					
					<excludes>
						<exclude>/src/main/java/template/**/*</exclude>
					</excludes>
					<!-- 指定main包含的文件 -->
<!-- 					
					<includes>
						<include></include>
					</includes>
-->
					<!-- 编译失败是否停止 -->
					<failOnError>true</failOnError>
					<!-- 增量编译时检查哪些文件，默认.class -->
<!-- 					<fileExtensions></fileExtensions> -->
					<!-- 是否强制jdk版本 -->
					<forceJavacCompilerUse>true</forceJavacCompilerUse>
					<!-- 是否分开执行编译，设置为true会导致部分输出中文乱码 -->
					<fork>false</fork>
					<!-- 源码位置是否显示过期api被使用 -->
					<showDeprecation>true</showDeprecation>
					<!-- 是否输出编译警告 -->
					<showWarnings>true</showWarnings>
					<!-- 忽略测试 -->
					<skip>true</skip>
					<!-- 是否忽略main源码 -->
					<skipMain>false</skipMain>
					<!--  main编译器版本 source 和 target 要保持一致 -->
					<source>${jdk.version}</source>
					<!-- main编译器版本 source 和 target 要保持一致 -->
					<target>${jdk.version}</target>
					<!-- 测试编译器版本 source 和 target 要保持一致 -->					
					<testSource>${jdk.version}</testSource>
					<!-- 测试编译器版本 source 和 target 要保持一致 -->							
					<testTarget>${jdk.version}</testTarget>
					<!-- 输出编译器详细运行信息 -->
					<verbose>true</verbose>
				</configuration>
			</plugin>
			
			<!-- 源码插件 -->
			<plugin>
				<artifactId>maven-source-plugin</artifactId>
				<version>${maven.plugin.source.version}</version>
				<configuration>
					<!-- 指定源码文件名 -->
<!-- 					<finalName>maven-build-0.0.1-sources.jar</finalName> -->
				</configuration>
				<executions>
					<execution>
						<phase>compile</phase>
						<goals>
							<!-- 源码打包方式 -->
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>			

			<!-- 资源插件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${maven.plugin.resources.version}</version>
				<configuration>
					<!-- 指定文件的编码 -->
					<encoding>${project.build.sourceEncoding}</encoding>
					<!-- 包含空目录 -->
					<includeEmptyDirs>true</includeEmptyDirs>
					<!-- 是否直接覆盖 -->
					<overwrite>true</overwrite>
				</configuration>
				<executions>
					<execution>
						<phase>compile</phase>
						<goals>
							<goal>resources</goal>
						</goals>
						<configuration>
							<includeEmptyDirs>true</includeEmptyDirs>
						</configuration>
					</execution>
				</executions>
			</plugin>	
			
		<!-- 测试用例插件，打包当前项目相关文件 -->
			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven.plugin.surefire.version}</version>
				<configuration>
					<!-- 解决 控制台输出测试信息 - 乱码 -->
					<argLine>-Dfile.encoding=${project.build.sourceEncoding}</argLine>
					<encoding>${project.build.sourceEncoding}</encoding>				
					<!-- 指定main排除的文件 (暂时无法实现) -->	
					<excludes>
						<exclude>/src/main/java/template/**/*</exclude>
					</excludes>
					<reuseForks>true</reuseForks>
					<!-- 打包时跳过单元测试 -->
					<skip>true</skip>
					<skipTests>true</skipTests>
					<!-- 忽略测试失败 -->
					<testFailureIgnore>true</testFailureIgnore>
					<!-- 工作目录，${basedir} -->
<!-- 					<workingDirectory></workingDirectory> -->
				</configuration>
			</plugin>			
			
			<!-- 组装插件 -->
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>${maven.plugin.assembly.version}</version>
				<configuration>
					<!-- 指定文件的编码 -->
					<encoding>${project.build.sourceEncoding}</encoding>
					<descriptorRefs>
						<!-- 所有依赖包的名称 -->
						 <descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
				</configuration>		
				<executions>
					<execution>
						<goals><goal>single</goal></goals>
					</execution>
				</executions>
			</plugin>	
	
			<!-- 输出依赖jar包到指定目录，在Goals 中输入: dependency:copy-dependencies -->
			<plugin>
				<artifactId>maven-dependency-plugin</artifactId>
				<configuration>
					<!-- 是否包含间接依赖包，选择 false 才能输出当前项目所有依赖的包 -->
					<excludeTransitive>false</excludeTransitive>
					<outputDirectory>${project.build.directory}/lib</outputDirectory>
					<!-- 是否去掉版本信息 -->
					<stripVersion>false</stripVersion>
				</configuration>
				<!-- 放入执行 -->
				<executions>
					<execution>
						<id>copy</id>
						<!-- 在安装的时候再打包 -->
						<phase>install</phase>
						<!-- 拷贝依赖 -->
						<goals>
							<goal>copy-dependencies</goal>						
						</goals>
						<configuration>
						<!-- 	<outputDirectory>${project.build.directory}/lib</outputDirectory> -->
							<!-- 是否包含间接依赖包，选择 false 才能输出当前项目所有依赖的包 -->
						<!-- 	<excludeTransitive>false</excludeTransitive> -->
							<!-- 是否去掉版本信息 -->
							<!-- <stripVersion>false</stripVersion>	 -->
						</configuration>
					</execution>
				</executions>
			</plugin>		
			
			<!-- maven部署插件 部署到本地，配合上传构件到github仓库 -->
			<plugin>
			    <artifactId>maven-deploy-plugin</artifactId>		
	<!-- 		    <version>3.0.0-M1</version>		 -->
			    <configuration>
			    	<altDeploymentRepository>
			    		internal.repo::default::file://${project.build.directory}/maven-repo
			    	</altDeploymentRepository>
			    </configuration>
			</plugin>
			
			<!-- 上传构件到github -->
			<plugin>
			    <groupId>com.github.github</groupId>
			    <artifactId>site-maven-plugin</artifactId>
			    <version>${github.plugin.site.version}</version>
			    <configuration>
			    	<!-- 和 settings.xml中的server id对应，匹配帐号密码 -->
			    	<server>github.repo</server>
			    	<!-- github 用户名 -->
			    	<repositoryOwner>dearcode2018</repositoryOwner>
			    	<repositoryName>maven-repo</repositoryName>
			    	<message>Maven artifacts for ${project.version}</message>
			    	<!--  -->
			    	<noJekyll>true</noJekyll>
			    	<outputDirectory>${project.build.directory}/maven-repo</outputDirectory>
			    	<!-- 分支 -->
			    	<branch>refs/heads/master</branch>
			    	<merge>true</merge>
			    	<includes>
			    		<include>**/*</include>
			    	</includes>
			    </configuration>
			    <executions>
			    	<execution>
			    		<goals>
			    			<goal>site</goal>
			    		</goals>
			    		<phase>deploy</phase>
			    	</execution>
			    </executions>
			</plugin>
			
		</plugins>
		
		
	</build>	

	<dependencies>
		<dependency>
			<groupId>com.hua</groupId>
			<artifactId>maven</artifactId>
			<version>${maven.version}</version>
			<scope></scope>
		</dependency>
		
	</dependencies>
	
	<!-- 通过 mvn <阶段...> -Pxx 来激活指定的profile，xx即为要激活的profile 
		激活test阶段的id为test的profile: mvn test -Ptest
	
	-->
	<profiles>
		<profile>
			<id>test</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.8</version>
						<executions>
							<execution>
								<phase>test</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<tasks>
										<echo>Using test properties</echo>
										<copy file="src/main/resources/filter/filter-test.properties" tofile="${project.build.outputDirectory}/test.properties" overwrite="true" />
									</tasks>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		
		<profile>
			<id></id>
			<activation>
				<!-- 通过操作系统环境自动激活 -->
				<os>
					<name>Windows 7</name>
					<family>Windows</family>
					<version>xx</version>
				</os>
			</activation>
		</profile>
	
		<profile>
			<id>fileExist</id>
			<!-- 文件 存在 或 不存在 激活 -->
			<activation>
<!-- 				<file>
					<missing>/data/a.log</missing>
				</file> -->
				<!-- 默认是激活的 -->
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.8</version>
						<executions>
							<execution>
								<phase>test</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<tasks>
										<echo>file not exist</echo>
									</tasks>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>			
		</profile>
		
	</profiles>
	
	<!-- 上传构件到 nexus Hosted仓库 -->
	<distributionManagement>
		<repository>
			<!-- 对应 maven settings.xml中的 server的id，server中配置了帐号/密码 -->
			<id>nexus</id>
			<name>company nexus repository.hosted repository</name>
			<uniqueVersion>false</uniqueVersion>
			<!-- 远程仓库的地址 -->
			<url>http://172.25.38.70:8081/nexus/content/repositories/myrepo</url>
		</repository>
	</distributionManagement>
	
</project>
